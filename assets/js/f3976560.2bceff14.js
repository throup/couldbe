"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[844],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=i,h=c["".concat(s,".").concat(m)]||c[m]||d[m]||r;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},672:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=n(7462),i=(n(7294),n(3905));const r={title:"optional Givens for Scala"},o="couldbe: optional Givens for Scala",l={type:"mdx",permalink:"/couldbe/",source:"@site/src/pages/index.md",title:"optional Givens for Scala",description:"GitHub Workflow Status",frontMatter:{title:"optional Givens for Scala"}},s=[{value:"Overview",id:"overview",level:2},{value:"Quick example",id:"quick-example",level:3},{value:"Getting started",id:"getting-started",level:2},{value:"Other examples",id:"other-examples",level:2},{value:"Authors",id:"authors",level:2}],p={toc:s},u="wrapper";function c(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"couldbe-optional-givens-for-scala"},"couldbe: optional Givens for Scala"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/throup/couldbe/actions/workflows/scala.yml"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/github/actions/workflow/status/throup/couldbe/scala.yml",alt:"GitHub Workflow Status"})),"\n",(0,i.kt)("a",{parentName:"p",href:"https://codecov.io/gh/throup/couldbe"},(0,i.kt)("img",{parentName:"a",src:"https://codecov.io/gh/throup/couldbe/branch/main/graph/badge.svg?token=XSUAQWYIOO",alt:"codecov"}))),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://typelevel.org/cats/img/cats-badge-tiny.png",alt:"Cats Friendly Badge"})),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"couldbe")," is a small library, for the ",(0,i.kt)("a",{parentName:"p",href:"https://scala-lang.org"},"Scala programming language"),", allowing you to refer to optional ",(0,i.kt)("inlineCode",{parentName:"p"},"given")," instances (previously known as implicits)."),(0,i.kt)("p",null,"Because ",(0,i.kt)("inlineCode",{parentName:"p"},"given")," instances are resolved at compile time, they are either available or they are not. If your code requires a ",(0,i.kt)("inlineCode",{parentName:"p"},"given")," instance, you add it to the function signature; if it doesn't, then you don't."),(0,i.kt)("p",null,"But what if your code ",(0,i.kt)("em",{parentName:"p"},"could")," use a ",(0,i.kt)("inlineCode",{parentName:"p"},"given")," instance, but doesn't require one?  Maybe you are writing an algorithm which ",(0,i.kt)("em",{parentName:"p"},"could")," be simplified with evidence of a Monad, but doesn't actually require it? Or maybe you can provide a sensible default if the ",(0,i.kt)("inlineCode",{parentName:"p"},"given")," value is not defined?"),(0,i.kt)("p",null,"That's where ",(0,i.kt)("strong",{parentName:"p"},"couldbe")," can help you out."),(0,i.kt)("h3",{id:"quick-example"},"Quick example"),(0,i.kt)("p",null,"(more examples later in the document)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'// Function to return a Given string, if it is defined; or a default value otherwise.\ndef simpleGivenParameter(using message: CouldBeGiven[String]) =\n  message match\n    case IsGiven(actual) => actual\n    case IsNotGiven      => "This is a default string"\n\n// ---\n// With no given String, the function returns the default value.\nsimpleGivenParameter == "This is a default string"\n\n// ---\n// With a given String, that is the value returned.\ngiven String = "This string is given"\nsimpleGivenParameter == "This string is given"\n')),(0,i.kt)("p",null,"Please note: it's not usually good practice to pass around something as generic as a ",(0,i.kt)("inlineCode",{parentName:"p"},"String")," type in a ",(0,i.kt)("inlineCode",{parentName:"p"},"given")," instance. This is a simple example to demonstrate the functionality."),(0,i.kt)("h2",{id:"getting-started"},"Getting started"),(0,i.kt)("p",null,"Packages for ",(0,i.kt)("strong",{parentName:"p"},"couldbe")," are published to ",(0,i.kt)("a",{parentName:"p",href:"https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-apache-maven-registry"},"Github's maven registry"),". To include in your project, add the appropriate dependencies to your ",(0,i.kt)("inlineCode",{parentName:"p"},"build.sbt"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sbt"},'libraryDependencies += "eu.throup" %% "couldbe" % "<latest version>"\n')),(0,i.kt)("p",null,"The available packages are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"couldbe"),": umbrella meta package to pull in ",(0,i.kt)("inlineCode",{parentName:"li"},"core")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"cats")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"couldbe-core"),": minimal implementation to allow basic functionality"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"couldbe-cats"),": extra definitions and functionality for those using the ",(0,i.kt)("a",{parentName:"li",href:"https://typelevel.org/cats/"},"Cats")," library"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"couldbe-testsupport"),": extra definitions and functionality to support writing tests")),(0,i.kt)("p",null,"You will also need to configure access to ",(0,i.kt)("a",{parentName:"p",href:"https://docs.github.com/en/packages/learn-github-packages/introduction-to-github-packages"},"Github's package registry"),". There are many ways to do this, but the simplest is to add ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/djspiewak/sbt-github-packages"},"sbt-github-packages")," to your ",(0,i.kt)("inlineCode",{parentName:"p"},"project/plugin.sbt"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sbt"},'addSbtPlugin("com.codecommit" % "sbt-github-packages" % "0.5.3")\n')),(0,i.kt)("h2",{id:"other-examples"},"Other examples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"def yourFunction[A: CouldBeGiven, B: CouldHave[PartialOrder], F[_]: CouldBe[Monad]] =\n  // Maybe there was a Given A... maybe there wasn't\n  CouldBeGiven[A].act {\n    // If there is one, do something with it.\n    (a: A) => doSomethingWith(a)\n  } {\n    // Otherwise perform some fallback behaviour.\n    () => doSomethingElseWithout()\n  }\n  \n  // Maybe F is a Monad... maybe it isn't\n  CouldBe[Monad, F].act {\n    // If it is, do something monadic\n    (monad: Monad[F]) => doSomethingMonadic(monad)\n  } {\n    // Otherwise perform some fallback behaviour.\n    () => doSomethingUnmonadic()\n  }\n")),(0,i.kt)("h2",{id:"authors"},"Authors"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Chris Throup")," - ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/throup"},"github")," - ",(0,i.kt)("a",{parentName:"li",href:"https://www.linkedin.com/in/christhroup"},"linkedin"))))}c.isMDXComponent=!0}}]);